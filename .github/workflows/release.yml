name: Build Portable C Kids Learn

on:
  push:        
    branches: [ main ] 

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create temp folder
        shell: pwsh
        run: |
          if (-Not (Test-Path .\temp)) { New-Item -ItemType Directory -Path .\temp | Out-Null }
          $env:TEMP_PATH = (Resolve-Path .\temp).Path
          Write-Host "TEMP_PATH set to $env:TEMP_PATH"


      - name: Download Portable Python
        shell: pwsh
        run: |
          $pythonVer = "3.13.5"
          $pythonUrl = "https://www.python.org/ftp/python/$pythonVer/python-$pythonVer-embed-amd64.zip"
          Write-Host "> Downloading Python v$pythonVer..."
          Invoke-WebRequest -Uri $pythonUrl -OutFile "$env:TEMP_PATH\python-$pythonVer-embed.zip"
          Write-Host "> Unpacking Python..."
          Expand-Archive -Path "$env:TEMP_PATH\python-$pythonVer-embed.zip" -DestinationPath "$env:TEMP_PATH\python-win"

      - name: Install pip
        shell: pwsh
        run: |
          $pipUrl = "https://bootstrap.pypa.io/get-pip.py"
          Write-Host "> Downloading pip..."
          Invoke-WebRequest -Uri $pipUrl -OutFile "$env:TEMP_PATH\get-pip.py"
          Write-Host "> Installing pip..."
          & "$env:TEMP_PATH\python-win\python.exe" "$env:TEMP_PATH\get-pip.py"

      - name: Configure _pth for portability
        shell: pwsh
        run: |
          Write-Host "> Configuring portability..."
          $pthFile = (Get-ChildItem "$env:TEMP_PATH\python-win" -Filter "python*._pth" | Select-Object -First 1).FullName
          $zipName = (Get-ChildItem "$env:TEMP_PATH\python-win" -Filter "python*.zip" | Select-Object -First 1).Name
          Set-Content -Path $pthFile -Value ("$zipName`n..`nlibs`nimport site")

      - name: Install dependencies
        shell: pwsh
        run: |
          Write-Host "> Installing requirements..."
          & "$env:TEMP_PATH\python-win\python.exe" -m pip install -r requirements.txt --target "$env:TEMP_PATH\python-win\libs"

      - name: Remove Python cache files
        shell: pwsh
        run: |
          Write-Host "> Removing cache files..."
          Get-ChildItem "$env:TEMP_PATH\python-win\libs" -Include *.pyc,__pycache__ -Recurse | Remove-Item -Force -Recurse

      - name: Move Python to project root
        shell: pwsh
        run: |
          Move-Item -Path "$env:TEMP_PATH\python-win" -Destination "python-win" -Force
          Remove-Item -Path $env:TEMP_PATH -Recurse -Force

      - name: Create portable launch file
        shell: pwsh
        run: |
          Set-Content -Path launch-win.bat -Value "@echo off`ncd /d ""%~dp0""`npython-win\python.exe run.py"

      - name: Remove unnecessary files
        shell: pwsh
        run: |
          Write-Host "> Cleaning unnecessary files..."
          $toRemove = @('.git', '.github', '__pycache__', 'subscripts', '.gitignore', 'python-win.zip', 'get-pip.py', 'medi.zip', 'requirements.txt')
          foreach ($item in $toRemove) {
            if (Test-Path $item) { Remove-Item -Recurse -Force $item -ErrorAction SilentlyContinue }
          }

      - name: Move files to portable directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path medi | Out-Null
          Get-ChildItem -Force | Where-Object { $_.Name -ne 'medi' } | Move-Item -Destination medi

      - name: Create portable zip
        shell: pwsh
        run: |
          Write-Host "> Creating medi.zip..."
          Compress-Archive -Path medi\* -DestinationPath medi.zip -Force

      - name: Upload to 'Latest' release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: medi.zip
          asset_name: medi.zip
          tag: latest
          release_name: Latest
          overwrite: true
          body: "Automated latest build for ${{ github.sha }}"
