name: Build Portable C Kids Learn

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Creating portable python
        shell: pwsh
        run: |
          $pythonVer = "3.13.5"
          $pythonUrl = "https://www.python.org/ftp/python/$pythonVer/python-$pythonVer-embed-amd64.zip"
          $pipUrl = "https://bootstrap.pypa.io/get-pip.py"
          $tempPath = ".\temp"

          # Create neccessary folders
          if (-Not (Test-Path $tempPath)) {
              New-Item -ItemType Directory -Path $tempPath | Out-Null
          }

          # Set temporary location as main
          Set-Location $tempPath

          # Download+Unpack Python and save it to temporary folder
          Write-Host "> Downloading Python v$pythonVer..."
          Invoke-WebRequest -Uri $pythonUrl -OutFile "python-$pythonVer-embed.zip"
          Write-Host "> Unpacking Python..."
          Expand-Archive -Path "python-$pythonVer-embed.zip" -DestinationPath ".\python-win"

          # Write _pth file to make portable
          $pthFile = (Get-ChildItem python-win -Filter "python*._pth" | Select-Object -First 1).FullName
          $zipName = (Get-ChildItem python-win -Filter "python*.zip" | Select-Object -First 1).Name
          Set-Content -Path $pthFile -Value @"
          $zipName
          ..
          libs
          import site
          "@

          # Download and install pip
          Write-Host "> Downloading pip..."
          Invoke-WebRequest -Uri $pipUrl -OutFile "get-pip.py"
          Write-Host "> Installing pip..."
          python-win/python.exe get-pip.py

          # Download requirements.txt
          Write-Host "> Downloading requirements..."
          python-win/python.exe -m pip install -r ../requirements.txt --target python-win/libs

          # Moving python-portable folder to project
          Move-Item -Path ".\python-win" -Destination "..\python-win" -Force

          # Cleaning 
          Set-Location ".."
          Remove-Item -Path $tempPath -Recurse

      - name: Create portable launch file
        shell: pwsh
        run: |
          Set-Content -Path launch-win.bat -Value "@echo off`ncd /d ""%~dp0""`npython-win\python.exe run.py"

      - name: Remove unnecessary files
        shell: pwsh
        run: |
          Write-Host "> Cleaning unnecessary files..."
          $toRemove = @('.git', '.github', '__pycache__', 'subscripts', '.gitignore', 'python-win.zip', 'get-pip.py', 'medi.zip', 'requirements.txt')
          foreach ($item in $toRemove) {
            if (Test-Path $item) { Remove-Item -Recurse -Force $item -ErrorAction SilentlyContinue }
          }

      - name: Move files to portable directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path c_learn | Out-Null
          Get-ChildItem -Force | Where-Object { $_.Name -ne 'c_learn' } | Move-Item -Destination c_learn

      - name: Create portable zip
        shell: pwsh
        run: |
          Write-Host "> Creating c_learn.zip..."
          Compress-Archive -Path c_learn\* -DestinationPath c_learn.zip -Force

      - name: Delete old Latest release
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to 'Latest' release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: c_learn.zip
          asset_name: c_learn.zip
          tag: latest
          release_name: Latest
          overwrite: true
          body: "Automated latest build for ${{ github.sha }}"

